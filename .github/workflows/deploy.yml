name: Deploy to Production

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm test

  build:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})

      - name: Update Helm Chart Version
        id: update_chart
        run: |
          TAG=${{steps.vars.outputs.tag}}
          echo "Updating appVersion in Chart.yaml to $TAG"
          sed -i "s/^appVersion:.*$/appVersion: \"$TAG\"/" helm/bte-trapi/Chart.yaml

          # Get the current chart version
          CURRENT_VERSION=$(grep '^version:' helm/bte-trapi/Chart.yaml | awk '{print $2}')
          echo "Current Helm chart version: $CURRENT_VERSION"

          # Calculate new semantic version (bump patch version)
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF++;print}')
          echo "New Helm chart version: $NEW_VERSION"
          sed -i "s/^version:.*$/version: \"$NEW_VERSION\"/" helm/bte-trapi/Chart.yaml

      - name: Commit Helm Chart Version Update
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add helm/bte-trapi/Chart.yaml
          git commit -m "Update Helm chart to version ${{ steps.update_chart.outputs.new_version }} with appVersion ${{ steps.vars.outputs.tag }}"
          git push origin main

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            biothings/bte_reasoner_api:latest
            biothings/bte_reasoner_api:${{steps.vars.outputs.tag}}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ env.SKIP_DEPLOY != 'true' }}
    steps:
      - name: SSH and deploy node app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/opt/biothings_explorer
            git stash && git pull
            rm docker-compose.yml
            cp docker-compose-prod.yml docker-compose.yml
            docker-compose up --force-recreate --build -d
            docker image prune -f

  performance-test:
    needs: [deploy]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: run performance test
        working-directory: ./performance-test
        run: |
          npm i -g artillery
          artillery run -e dev --output report_dev.json --config config.yaml scenarios/query.yaml
          artillery report --output report.html report_dev.json
          ls -l
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "performance-test/report.html"
          target: "~/opt/biothings_explorer/performance-test"
          strip_components: 1
